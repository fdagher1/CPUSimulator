package consoles;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;

public class TechnicianConsole extends JFrame {

	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;

	// Title label across the top
	private JLabel titleLabel;

	// Display some of the content of RAM
	JLabel lblMemory;
	JTextArea textMemory;
	JScrollPane textMemoryScrollPane;

	// Display cache content
	JLabel lblCache;
	JTextArea textCache;
	JScrollPane textCacheScrollPane;

	// Constructor
	public TechnicianConsole(String title) {
		// General setup of the window
		super(title);
		this.setSize(1200, 600);
		this.setLocation(150, 100);

		arrangeComponentsOnConsole();
	}

	private void arrangeComponentsOnConsole() {
		// Main container setup
		Container mainContainer = this.getContentPane();
		mainContainer.setLayout(new BorderLayout(8, 8));
		mainContainer.setBackground(ConsoleStyleProperties.darkGray);

		// ****
		// Setup of the panels that will later have components added to them
		// ****

		// Top (title) panel
		JPanel topPanel = new JPanel();
		topPanel.setLayout(new FlowLayout(10));
		topPanel.setBackground(ConsoleStyleProperties.yellow);
		mainContainer.add(topPanel, BorderLayout.NORTH);

		// Main panel for content in the middle
		JPanel displayPanel = new JPanel();
		displayPanel.setLayout(new GridBagLayout());
		displayPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		displayPanel.setBackground(ConsoleStyleProperties.darkGray);
		mainContainer.add(displayPanel);

		// ****
		// Adding components to the panels declared above
		// ****

		// Title Label across the top
		titleLabel = new JLabel("CISC Technicians Console (C S C I 6 4 6 1)");
		titleLabel.setFont(new Font("Tahoma", Font.BOLD, 20));
		titleLabel.setBackground(ConsoleStyleProperties.yellow);
		titleLabel.setForeground(ConsoleStyleProperties.white);
		titleLabel.setOpaque(true);
		topPanel.add(titleLabel);

		// Memory display
		GridBagConstraints c = new GridBagConstraints(); // Parameters used by the GridBagLayout to arrange components
		Insets defaultInsets = new Insets(3, 3, 0, 3); // Top, Left, and Right padding
		c.insets = defaultInsets;
		c.weightx = 0.5;
		c.fill = GridBagConstraints.HORIZONTAL;

		lblMemory = new JLabel("RAM:");
		ConsoleStyleProperties.applyLabelProperties(lblMemory);
		c.insets = new Insets(25, 3, 0, 3); // Increase padding from the top to 25
		c.anchor = GridBagConstraints.NORTH; // Display label at the top of its cell
		c.gridx = 0;
		c.gridy = 0;
		c.weightx = .05;
		displayPanel.add(lblMemory, c);

		c.weightx = 0.5;
		
		textMemory = new JTextArea();
		textMemoryScrollPane = new JScrollPane(textMemory);
		ConsoleStyleProperties.applyTextAreaProperties(textMemory);
		c.anchor = GridBagConstraints.CENTER; // back to default
		c.ipady = 350; // make this component tall
		c.gridwidth = 1; // 1 column wide
		c.gridx = 1;
		c.gridy = 0;
		displayPanel.add(textMemoryScrollPane, c);

		// Cache Display
		c = new GridBagConstraints(); // Parameters used by the GridBagLayout to arrange components
		defaultInsets = new Insets(3, 3, 0, 3); // Top, Left, and Right padding
		c.insets = defaultInsets;
		c.weightx = 0.5;
		c.fill = GridBagConstraints.HORIZONTAL;

		lblCache = new JLabel("Cache:");
		ConsoleStyleProperties.applyLabelProperties(lblCache);
		c.insets = new Insets(25, 3, 0, 3); // Increase padding from the top to 25
		c.anchor = GridBagConstraints.NORTH; // Display label at the top of its cell
		c.gridx = 2;
		c.gridy = 0;
		c.weightx = .05;
		displayPanel.add(lblCache, c);

		c.weightx = 0.5;
		
		textCache = new JTextArea();
		textCacheScrollPane = new JScrollPane(textCache);
		ConsoleStyleProperties.applyTextAreaProperties(textCache);
		c.anchor = GridBagConstraints.CENTER; // back to default
		c.ipady = 350; // make this component tall
		c.ipadx = 550;
		c.gridwidth = 4; // 4 columns wide
		c.gridx = 3;
		c.gridy = 0;
		displayPanel.add(textCacheScrollPane, c);
	}

	public void updateMemoryOutput(components.CPU cpu, components.Memory memory) {
		// Clear the memory display content before updating its content
		textMemory.setText(null);

		StringBuilder sb = new StringBuilder();

		// Updating RAM output
		for (int i = 0; i < memory.addr.length; i++) {
			String tab = ": ";
			if (i < 10) {
				tab = "  : ";
			}

			sb.append(String.valueOf(i) + tab + memory.read(i) + "\n");
			// textMemory.setText(textMemory.getText() + String.valueOf(i) + tab +
			// memory.fetchAddr(i) + "\n");
		}

		textMemory.setText(sb.toString());
	}

	public void updateCacheOutput(components.L1Cache l1cache) {
		// Clear the cache display content before update its content
		textCache.setText(null);
		textCache.setText("      " + "Tag #" + "\t\t" + "Word 00" + "\t\t" + "Word 01" + "\t\t" + "Word 10" + "\t\t"
				+ "Word 11" + "\n");
		for (int i = 0; i < l1cache.cache.size(); i++) {
			String tab = ":";
			if (i < 10) {
				tab = "  : ";
			}
			textCache.setText(textCache.getText() + String.valueOf(i) + tab + l1cache.getWordsFromLine(i) + "\n");
		}
	}

	// Function to be used whenever we want to clear the RAM field
	public void clearRAMField() {
		textMemory.setText(null);
	}
}
