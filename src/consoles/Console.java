package consoles;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;

public class Console extends JFrame {
	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;

	public boolean isNotHalted = true;

	// ****
	// Declaring the frame components
	// ****

	// Label across the top.
	JLabel titleLabel;

	// Every string in this array will have a label with that string as a name and a
	// input field created adjacent to it. This is used below to create the labels
	// and output fields for the index registers and general purpose registers in
	// the left middle panel. NOTE: The order here is important because these
	// elements are access later in a specific order in the updateUI() method.
	String[] indexAndGPRLabelNames = { "R0", "R1", "R2", "R3", "X1", "X2", "X3", "FR0", "FR1" };

	// These arrays just hold references to the label and input components we
	// create. Each register also has a GUI button that allows the user to deposit
	// values directly into these registers.
	JLabel[] indexAndGPRLabelObjects = new JLabel[indexAndGPRLabelNames.length];
	JTextField[] indexAndGPRLabelOutputs = new JTextField[indexAndGPRLabelNames.length];
	JButton[] indexAndGPRButtonObjects = new JButton[indexAndGPRLabelNames.length];

	// Condition code register
	JLabel lblCC;
	JTextField textCC;

	// Machine fault register
	JLabel lblMFR;
	JTextField textMFR;

	// Instruction Register
	JLabel lblIR;
	JTextField textIR;

	// Opcode of current instruction
	JLabel lblOpcode;
	JTextField textOpcode;

	// Address parameter of the current instruction
	JLabel lblAddress;
	JTextField textAddress;

	// General purpose register number
	JLabel lblGPR;
	JTextField textGPR;

	// Index register number
	JLabel lblIX;
	JTextField textIX;

	// Instruction number
	JLabel lblInstructionNumber;
	JTextField textInstructionNumber;

	// Displaying status messages
	JLabel lblStatus;
	JTextArea textStatus;
	JScrollPane textStatusScrollPane;

	// Current value of the Program Counter (PC)
	JLabel lblPC;
	JTextField textPC;

	// Memory Address Register (MAR)
	JLabel lblMAR;
	JTextField textMAR;

	// Memory Buffer Register (MBR)
	JLabel lblMBR;
	JTextField textMBR;

	// Machine status register (MSR)
	JLabel lblMSR;
	JTextField textMSR;

	// Console printer
	JLabel lblConsolePrinter;
	private JTextArea textConsolePrinter;
	JScrollPane textConsolePrinterScrollPane;

	// Console keyboard input
	JLabel lblConsoleInput;
	JTextField textConsoleInput;
	JButton enterButton;

	// Buttons on the left column
	JButton btnIPL;
	JButton loadProgram1Button;
	JButton loadProgram2Button;
	JButton runProgramButton;
	JButton oneStepButton;
	JButton depositInstructionButton;
	JButton changePCButton;
	JButton changeMARButton;
	JButton showTechniciansConsoleButton;

	// Array with references to the toggle button objects on the bottom
	JToggleButton[] toggleButtons;

	// Constructor
	public Console(String title) {
		// General setup of the window
		super(title);
		this.setSize(1200, 700);
		this.setLocation(100, 50);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		arrangeComponentsOnConsole();
	}

	// This method instantiates and arranges the different components on our console
	// window
	private void arrangeComponentsOnConsole() {
		Container mainContainer = this.getContentPane();
		mainContainer.setLayout(new BorderLayout(8, 8));
		mainContainer.setBackground(ConsoleStyleProperties.darkGray);

		// ****
		// Setup of the panels that will later have components added to them
		// ****

		// Top (title) panel
		JPanel topPanel = new JPanel();
		topPanel.setLayout(new FlowLayout(10));
		topPanel.setBackground(ConsoleStyleProperties.yellow);
		mainContainer.add(topPanel, BorderLayout.NORTH);

		// Panel for the buttons on the left
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(9, 1, 0, 0));
		buttonPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); // Adds padding
		buttonPanel.setBackground(ConsoleStyleProperties.darkGray);
		mainContainer.add(buttonPanel, BorderLayout.WEST);

		// Panel for display content in the middle
		JPanel displayPanel = new JPanel();
		displayPanel.setLayout(new GridLayout(1, 2, 0, 0));
		displayPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		displayPanel.setBackground(ConsoleStyleProperties.darkGray);
		mainContainer.add(displayPanel);

		// Left panel within display panel
		JPanel leftPanel = new JPanel();
		leftPanel.setLayout(new GridBagLayout());
		leftPanel.setBackground(ConsoleStyleProperties.darkGray);
		displayPanel.add(leftPanel);

		// Right Panel within display panel
		JPanel rightPanel = new JPanel();
		rightPanel.setLayout(new GridBagLayout());
		rightPanel.setBackground(ConsoleStyleProperties.darkGray);
		displayPanel.add(rightPanel);

		// Bottom (toggles) panel
		JPanel bottomPanel = new JPanel();
		bottomPanel.setPreferredSize(new Dimension(50, 70));
		bottomPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); // Adds padding
		bottomPanel.setLayout(new GridLayout(1, 2, 1, 0));
		bottomPanel.setBackground(ConsoleStyleProperties.darkGray);

		mainContainer.add(bottomPanel, BorderLayout.SOUTH);

		// ****
		// Adding components to the panels declared above
		// ****

		// Title Label across the top
		titleLabel = new JLabel("CISC SIMULATOR (C S C I 6 4 6 1)");
		titleLabel.setFont(new Font("Tahoma", Font.BOLD, 20));
		titleLabel.setBackground(ConsoleStyleProperties.yellow);
		titleLabel.setForeground(ConsoleStyleProperties.white);
		titleLabel.setOpaque(true);

		topPanel.add(titleLabel);

		// Buttons on the left
		btnIPL = new JButton("IPL");
		btnIPL.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				components.Main.iplButtonClicked();
				haltConsole(false);
			}
		});
		ConsoleStyleProperties.applyButtonProperties(btnIPL);
		buttonPanel.add(btnIPL);

		loadProgram1Button = new JButton("Load Program 1");
		loadProgram1Button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					components.Main.loadP1Clicked();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		ConsoleStyleProperties.applyButtonProperties(loadProgram1Button);
		buttonPanel.add(loadProgram1Button);

		loadProgram2Button = new JButton("Load Program 2");
		loadProgram2Button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					components.Main.loadP2Clicked();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		ConsoleStyleProperties.applyButtonProperties(loadProgram2Button);
		buttonPanel.add(loadProgram2Button);
		
		runProgramButton = new JButton("Run Program");
		runProgramButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					components.Main.runProgramButtonClicked();
				} catch (FileNotFoundException e1) {
					e1.printStackTrace();
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		});
		ConsoleStyleProperties.applyButtonProperties(runProgramButton);
		buttonPanel.add(runProgramButton);

		oneStepButton = new JButton("One Step");
		oneStepButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					components.Main.oneStepButtonClicked();
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		ConsoleStyleProperties.applyButtonProperties(oneStepButton);
		buttonPanel.add(oneStepButton);

		depositInstructionButton = new JButton("Deposit To Memory");
		depositInstructionButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				components.Main.depositButtonClicked(readToggleInput());
			}
		});
		ConsoleStyleProperties.applyButtonProperties(depositInstructionButton);
		buttonPanel.add(depositInstructionButton);

		changePCButton = new JButton("Change PC");
		changePCButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				components.Main.changePCButtonClicked(readToggleInput());
			}
		});
		ConsoleStyleProperties.applyButtonProperties(changePCButton);
		buttonPanel.add(changePCButton);

		changeMARButton = new JButton("Change MAR");
		changeMARButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				components.Main.changeMARButtonClicked(readToggleInput());
			}
		});
		ConsoleStyleProperties.applyButtonProperties(changeMARButton);
		buttonPanel.add(changeMARButton);

		showTechniciansConsoleButton = new JButton("Display Technicians Console");
		showTechniciansConsoleButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				components.Main.startTechnicianConsole();
			}
		});
		ConsoleStyleProperties.applyButtonProperties(showTechniciansConsoleButton);
		buttonPanel.add(showTechniciansConsoleButton);

		// Toggle buttons on the bottom
		toggleButtons = new JToggleButton[16];

		int toggleName = 32768;
		for (int i = 0; i < 16; i++) {
			toggleButtons[i] = new JToggleButton(Integer.toString(toggleName));
			toggleButtons[i].setBackground(ConsoleStyleProperties.yellow);
			toggleButtons[i].setForeground(ConsoleStyleProperties.white);
			toggleButtons[i].setBorderPainted(false);
			toggleButtons[i].setOpaque(true);
			bottomPanel.add(toggleButtons[i]);
			toggleName /= 2;
		}

		// ****
		// Components in the middle
		// ****

		// Components in the left column of the middle panel
		GridBagConstraints c = new GridBagConstraints(); // Parameters used by the GridBagLayout to arrange components
		Insets defaultInsets = new Insets(3, 3, 0, 3); // Top, Left, and Right padding
		c.insets = defaultInsets;
		c.weightx = 0.5;
		c.fill = GridBagConstraints.HORIZONTAL;

		// Create label and input field for each of the labels defined in an array of
		// Strings above
		for (int i = 0; i < indexAndGPRLabelNames.length; i++) {
			JLabel newJLabel = new JLabel(indexAndGPRLabelNames[i]);
			ConsoleStyleProperties.applyLabelProperties(newJLabel);
			indexAndGPRLabelObjects[i] = newJLabel;

			JTextField newTextField = new JTextField();
			ConsoleStyleProperties.applyTextFieldProperties(newTextField);
			indexAndGPRLabelOutputs[i] = newTextField;

			JButton newButton = new JButton("Deposit to " + indexAndGPRLabelNames[i]);
			newButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					components.Main.depositToRegisterButtonClicked(e);
				}
			});
			ConsoleStyleProperties.applyDepositButtonProperties(newButton);
			indexAndGPRButtonObjects[i] = newButton;

			c.gridx = 0;
			c.gridy = i;
			leftPanel.add(indexAndGPRLabelObjects[i], c);

			c.gridwidth = 2; // 2 columns wide
			c.gridx = 1;
			c.gridy = i;
			leftPanel.add(indexAndGPRLabelOutputs[i], c);

			c.gridwidth = 1; // 1 column wide
			c.gridx = 3;
			c.gridy = i;
			leftPanel.add(indexAndGPRButtonObjects[i], c);
		}

		lblCC = new JLabel("CC");
		lblCC.setForeground(ConsoleStyleProperties.white);
		c.gridx = 0;
		c.gridy = indexAndGPRLabelNames.length + 1;
		leftPanel.add(lblCC, c);

		textCC = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textCC);
		c.gridwidth = 1; // 1 column wide
		c.weightx = 0.5;
		c.gridx = 1;
		c.gridy = indexAndGPRLabelNames.length + 1;
		leftPanel.add(textCC, c);

		lblMFR = new JLabel("MFR");
		ConsoleStyleProperties.applyLabelProperties(lblMFR);
		c.gridx = 2;
		c.gridy = indexAndGPRLabelNames.length + 1;
		leftPanel.add(lblMFR, c);

		textMFR = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textMFR);
		c.gridx = 3;
		c.gridy = indexAndGPRLabelNames.length + 1;
		leftPanel.add(textMFR, c);

		c.insets = new Insets(30, 3, 0, 3); // Increase padding from the top to 30

		lblPC = new JLabel("PC");
		ConsoleStyleProperties.applyLabelProperties(lblPC);
		c.ipady = 0; // back to default
		c.gridwidth = 1; // 1 column wide
		c.gridx = 0;
		c.gridy = indexAndGPRLabelNames.length + 2;
		leftPanel.add(lblPC, c);

		textPC = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textPC);
		c.gridx = 1;
		c.gridy = indexAndGPRLabelNames.length + 2;
		leftPanel.add(textPC, c);

		lblMAR = new JLabel("MAR");
		ConsoleStyleProperties.applyLabelProperties(lblMAR);
		c.gridx = 2;
		c.gridy = indexAndGPRLabelNames.length + 2;
		leftPanel.add(lblMAR, c);

		textMAR = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textMAR);
		c.gridx = 3;
		c.gridy = indexAndGPRLabelNames.length + 2;
		leftPanel.add(textMAR, c);

		c.insets = defaultInsets;

		lblMBR = new JLabel("MBR");
		ConsoleStyleProperties.applyLabelProperties(lblMBR);
		c.gridx = 0;
		c.gridy = indexAndGPRLabelNames.length + 3;
		leftPanel.add(lblMBR, c);

		textMBR = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textMBR);
		c.gridwidth = 4; // 4 columns wide
		c.weightx = 0.5;
		c.gridx = 1;
		c.gridy = indexAndGPRLabelNames.length + 3;
		leftPanel.add(textMBR, c);

		lblMSR = new JLabel("MSR");
		ConsoleStyleProperties.applyLabelProperties(lblMSR);
		c.gridx = 0;
		c.gridy = indexAndGPRLabelNames.length + 4;
		leftPanel.add(lblMSR, c);

		textMSR = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textMSR);
		c.gridwidth = 4; // 4 columns wide
		c.weightx = 0.5;
		c.gridx = 1;
		c.gridy = indexAndGPRLabelNames.length + 4;
		leftPanel.add(textMSR, c);

		c.insets = new Insets(30, 3, 0, 3); // Increase padding from the top to 30

		lblStatus = new JLabel("Status");
		ConsoleStyleProperties.applyLabelProperties(lblStatus);
		c.gridx = 0;
		c.gridy = indexAndGPRLabelNames.length + 5;
		leftPanel.add(lblStatus, c);

		textStatus = new JTextArea();
		textStatusScrollPane = new JScrollPane(textStatus);
		ConsoleStyleProperties.applyTextAreaProperties(textStatus);
		c.gridwidth = 4; // 4 columns wide
		c.weightx = 0.5;
		c.ipady = 85; // make this component tall
		c.gridx = 1;
		c.gridy = indexAndGPRLabelNames.length + 5;
		leftPanel.add(textStatusScrollPane, c);

		c.insets = defaultInsets; // reset to default

		// Components in the middle column of the middle panel
		lblIR = new JLabel("IR ");
		ConsoleStyleProperties.applyLabelProperties(lblIR);
		c.ipady = 0; // reset to default
		c.gridx = 0;
		c.gridy = 0;
		rightPanel.add(lblIR, c);

		textIR = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textIR);
		c.gridwidth = 5; // 5 columns wide
		c.gridx = 1;
		c.gridy = 0;
		rightPanel.add(textIR, c);

		lblOpcode = new JLabel("opcode");
		ConsoleStyleProperties.applyLabelProperties(lblOpcode);
		c.gridx = 0;
		c.gridy = 1;
		rightPanel.add(lblOpcode, c);

		textOpcode = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textOpcode);
		c.gridwidth = 2; // 2 columns wide
		c.gridx = 1;
		c.gridy = 1;
		rightPanel.add(textOpcode, c);

		lblAddress = new JLabel("ad.");
		ConsoleStyleProperties.applyLabelProperties(lblAddress);
		c.gridx = 3;
		c.gridy = 1;
		rightPanel.add(lblAddress, c);

		textAddress = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textAddress);
		c.gridwidth = 2; // 2 columns wide
		c.gridx = 4;
		c.gridy = 1;
		rightPanel.add(textAddress, c);

		lblGPR = new JLabel("GPR#");
		ConsoleStyleProperties.applyLabelProperties(lblGPR);
		c.gridx = 0;
		c.gridy = 3;
		rightPanel.add(lblGPR, c);

		textGPR = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textGPR);
		c.gridwidth = 1; // 1 column wide
		c.weightx = 0.5;
		c.gridx = 1;
		c.gridy = 3;
		rightPanel.add(textGPR, c);

		lblIX = new JLabel("IX#");
		ConsoleStyleProperties.applyLabelProperties(lblIX);
		c.gridx = 2;
		c.gridy = 3;
		rightPanel.add(lblIX, c);

		textIX = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textIX);
		c.gridx = 3;
		c.gridy = 3;
		rightPanel.add(textIX, c);

		lblInstructionNumber = new JLabel("I#");
		ConsoleStyleProperties.applyLabelProperties(lblInstructionNumber);
		c.gridx = 4;
		c.gridy = 3;
		rightPanel.add(lblInstructionNumber, c);

		textInstructionNumber = new JTextField();
		ConsoleStyleProperties.applyTextFieldProperties(textInstructionNumber);
		c.gridx = 5;
		c.gridy = 3;
		rightPanel.add(textInstructionNumber, c);

		lblConsolePrinter = new JLabel("Console Printer");
		ConsoleStyleProperties.applyLabelProperties(lblConsolePrinter);
		c.anchor = GridBagConstraints.NORTH; // Place label at the top of its cell
		c.gridx = 0;
		c.gridy = 4;
		rightPanel.add(lblConsolePrinter, c);

		setTextConsolePrinter(new JTextArea());
		textConsolePrinterScrollPane = new JScrollPane(getTextConsolePrinter());
		ConsoleStyleProperties.applyTextAreaProperties(getTextConsolePrinter());
		c.anchor = GridBagConstraints.CENTER; // Setting anchor back to center
		c.ipady = 400; // make this component tall
		c.gridwidth = 5; // 5 columns wide
		c.gridx = 1;
		c.gridy = 4;
		rightPanel.add(textConsolePrinterScrollPane, c);
	}

	// ****
	// Functions to update text fields
	// ****

	// Update the UI with the current values for each element
	public void updateUI(components.CPU cpu, components.Memory memory, components.L1Cache l1cache) {
		// Update the different registers with their new values
		indexAndGPRLabelOutputs[0].setText(cpu.R[0]);
		indexAndGPRLabelOutputs[1].setText(cpu.R[1]);
		indexAndGPRLabelOutputs[2].setText(cpu.R[2]);
		indexAndGPRLabelOutputs[3].setText(cpu.R[3]);
		indexAndGPRLabelOutputs[4].setText(cpu.X[1]);
		indexAndGPRLabelOutputs[5].setText(cpu.X[2]);
		indexAndGPRLabelOutputs[6].setText(cpu.X[3]);
		indexAndGPRLabelOutputs[7].setText(cpu.FPR[0]);
		indexAndGPRLabelOutputs[8].setText(cpu.FPR[1]);
		textPC.setText(String.valueOf(cpu.PC));
		textMAR.setText(String.valueOf(cpu.MAR));
		textMBR.setText(cpu.MBR);
		textIR.setText(cpu.IR);
		textCC.setText(cpu.CC);
		textMFR.setText(cpu.MFR);
		textOpcode.setText(cpu.opcode);
		textGPR.setText(String.valueOf(cpu.GPR));
		textIX.setText(String.valueOf(cpu.IX));
		textInstructionNumber.setText(String.valueOf(cpu.I));
		textAddress.setText(cpu.address);

		components.Main.technicianConsole.updateMemoryOutput(cpu, memory);
		components.Main.technicianConsole.updateCacheOutput(l1cache);
	}

	// Function to be used whenever we want to display a status update in the Output
	// field
	public void writeToOutput(String text) {
		textStatus.setText(textStatus.getText() + text + "\n");
	}

	// Function to be used whenever we want to clear the Output field
	public void clearOutputField() {
		textStatus.setText(null);
	}

	// Function to read the input for either Depositing an instruction or changing
	// the PC
	public String readToggleInput() {
		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < toggleButtons.length; i++) {
			// If a toggle is selected that bit is a 1 if not it is a zero
			if (toggleButtons[i].isSelected()) {
				sb.append("1");
			} else {
				sb.append("0");
			}
		}

		return sb.toString();
	}

	public void haltConsole(boolean toHalt) {
		// Set the buttons to be clickable or unclickable depending on shouldBeEnabled

		isNotHalted = !toHalt;

		loadProgram1Button.setEnabled(isNotHalted);
		loadProgram2Button.setEnabled(isNotHalted);
		oneStepButton.setEnabled(isNotHalted);
		depositInstructionButton.setEnabled(isNotHalted);
		changePCButton.setEnabled(isNotHalted);
		changeMARButton.setEnabled(isNotHalted);
		showTechniciansConsoleButton.setEnabled(isNotHalted);
		runProgramButton.setEnabled(isNotHalted);

		for (JToggleButton toggleButton : toggleButtons) {
			toggleButton.setEnabled(isNotHalted);
		}

		for (JButton registerDepositButton : indexAndGPRButtonObjects) {
			registerDepositButton.setEnabled(isNotHalted);
		}

		if (!isNotHalted) {
			writeToOutput("Machine halted");
		}

	}

	public void appendToConsolePrinter(String toAppend, boolean inline) {
		if (textConsolePrinter.getText().length() == 0) {
			// If empty just add text
			textConsolePrinter.setText(toAppend.trim());
			return;
		}

		if (inline) {
			textConsolePrinter.setText(textConsolePrinter.getText() + toAppend.trim());
		} else {
			String currentText = textConsolePrinter.getText();

			if (currentText.charAt(currentText.length() - 1) == '\n') {
				textConsolePrinter.setText(currentText + toAppend.trim() + "\n");
			} else {
				textConsolePrinter.setText(currentText + "\n" + toAppend.trim() + "\n");
			}

		}

	}

	/**
	 * @return the textConsolePrinter
	 */
	public JTextArea getTextConsolePrinter() {
		return textConsolePrinter;
	}

	/**
	 * @param textConsolePrinter the textConsolePrinter to set
	 */
	public void setTextConsolePrinter(JTextArea textConsolePrinter) {
		this.textConsolePrinter = textConsolePrinter;
	}

	/**
	 * @return the textConsolePrinter
	 */
	public JTextArea getTextStatus() {
		return textStatus;
	}

}